struct {{meta|cs_msg_name}} {
    {{!for vf in fields}}
    {{vf.meta|cs_field_type}} {{vf.meta|cs_field_name}};
    {{}}
    void    construct(){
        memset(this, 0, sizeof(*this));
    }
    int     convto({{meta|msg_name}} & tomsg_) const {
        int ret = 0;
        {{!for vf in fields}}
            {{!if vf|field_count}}
                for (int i = 0;i < {{vf|field_name}}.count; ++i){
                    {{!if vf|field_is_msg}}
                        ret += field.name[i].convto(*tomsg_.add_field.name);
                        if (ret) return __LINE__+ret;
                    {{!elif vf|field_is_bytes = 1}}
                        tomsg_.add_{{vf|field_name}}({{vf.meta|cs_field_name}}[i].data, {{vf.meta|cs_field_name}}[i].length);
                    {{!elif vf.meta|field_is_string = 1}}
                         tomsg_.add_{{vf|field_name}}({{vf.meta|cs_field_name}}[i].data);
                    {{!else}}
                        tomsg_.add_{{vf|field_name}}({{vf.meta|cs_field_name}}[i]);
                    {{}}
               }
            {{!else}}
                    {{!if vf|field_is_msg}}
                        ret += {{vf.meta|cs_field_name}}.convto(*tomsg_.mutable_{{vf|field_name}});
                        if (ret) return __LINE__+ret;
                    {{!elif vf|field_is_bytes = 1}}
                        tomsg_.set_{{vf|field_name}}({{vf.meta|cs_field_name}}.data, {{vf.meta|cs_field_name}}.length);
                    {{!elif vf.meta|field_is_string = 1}}
                        tomsg_.set_{{vf|field_name}}({{vf.meta|cs_field_name}}.data);
                    {{!else}}
                        tomsg_.set_{{vf|field_name}}({{vf.meta|cs_field_name}});
                    {{}}
            {{}}
        {{}}
        return ret;
    }
    int     convfrom(const {{meta|msg_name}} & frommsg_) const {
		int ret = 0;
        {{!for vf in fields}}
            {{!if vf|field_count}}
				{{vf|field_name}}.count=0;
                for (int i = 0;i < frommsg_.{{vf|field_name}}_size() && i < {{vf|field_count}}; ++i){
                    {{!if vf|field_is_msg}}
                        ret += {{vf|cs_field_name}}[i].convfrom(frommsg_.{{vf|field_name}});
                        if (ret) return __LINE__+ret;
                    {{!elif vf|field_is_bytes = 1}}
                        tomsg_.add_{{vf|field_name}}({{vf.meta|cs_field_name}}[i].data, {{vf.meta|cs_field_name}}[i].length);
						{{vf|cs_field_name}}[i].
                    {{!elif vf.meta|field_is_string = 1}}
                         tomsg_.add_{{vf|field_name}}({{vf.meta|cs_field_name}}[i].data);
                    {{!else}}
                        tomsg_.add_{{vf|field_name}}({{vf.meta|cs_field_name}}[i]);
                    {{}}
               }
            {{!else}}
                    {{!if vf|field_is_msg}}
                        ret += {{vf.meta|cs_field_name}}.convto(*tomsg_.mutable_{{vf|field_name}});
                        if (ret) return __LINE__+ret;
                    {{!elif vf|field_is_bytes = 1}}
                        tomsg_.set_{{vf|field_name}}({{vf.meta|cs_field_name}}.data, {{vf.meta|cs_field_name}}.length);
                    {{!elif vf.meta|field_is_string = 1}}
                        tomsg_.set_{{vf|field_name}}({{vf.meta|cs_field_name}}.data);
                    {{!else}}
                        tomsg_.set_{{vf|field_name}}({{vf.meta|cs_field_name}});
                    {{}}
            {{}}
        {{}}
        return ret;
    }
    int     compare(const msg.name | cs.msg_type_name & rhs_) const {
        int cmp = 0;
        for field in msg.fields
            cmp = field.name|cs.filed_name.compare(rhs_.field.name);
        if cmp return cmp;
        return 0;
    }
    bool    operator == (const msg.name | cs.msg_type_name & rhs_) const {
        return this->compare(rhs_) == 0;
    }
    bool    operator < (const msg.name | cs.msg_type_name & rhs_) const {
        return this->compare(rhs_) < 0;
    }

}
*
